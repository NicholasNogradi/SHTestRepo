# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
#
# Workflow description: this Action will fire on every push/commit to a SwaggerHub defined branch in the repository. 
#  The SwaggerHub branch naming convention is: "swaggerhub-<api-name>-<version> (a request to add Org name haws been opened).
#  The work flow will extract API name and Version and then process the push to see if the API is Published.
#  For a Published API, the workflow should create a PR with Approvers to the the develop branch.
#
#  Assumption: the user must be sending at least Yaml Resolved to the default location defined in the SCM integrations. 
#
#  m. higgins     04/07/2024  initial coding and thanks to Frank K. (1.0.0)
#

name: API CI - commit

on:
  push: 
    branches:
      - '**swaggerhub**'
    paths:
      - 'yaml-resolved/**/*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Nodejs 20.11.0
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'    
          
# install required tooling    
      - name: Install jq utility
        run: sudo apt-get --yes --quiet install jq

      - name: Install Dependencies
        run: npm install   

      - name: Prepare scripts for execution
        run: |
          chmod +x ./scripts/api_metadata.sh
          chmod +x ./scripts/cicd_get_version.sh
          chmod +x ./scripts/cicd_check_validation.sh
          chmod +x ./scripts/cicd_check_comments.sh
          chmod +x ./scripts/cicd_spec_validator.sh

##########################################################################################################################################
          
# get the API Version from the yaml source file in yanl-resolved/swagger.yaml           
      - name: Get the API Version
        run: |
          VER=$(./scripts/cicd_get_version.sh $SPEC_LOCATION/swagger.yaml yaml | jq .version | tr -d '"')
          echo "VER=$VER" >> $GITHUB_ENV

# remove the version string and "swaggerhub" string from the branch name to get the api name
      - name: Get the api file name
        run: |
          WORK=$(sed "s/-$VER//" <<< $GITHUB_BRANCH)
          API=$(sed "s/swaggerhub-//" <<< $WORK)
          echo "API=$API" >> $GITHUB_ENV
      
# ok, so how do i get ORG ???
#
#

# report what we know
      - name: Report API identification
        run: |
          echo "org     ---> $ORG"
          echo "api     ---> $API"
          echo "version ---> $VER"

# display all the meta-data for the API
      - name: Display all meta-data    
        run: |
          ./scripts/api_metadata.sh $ORG $API $VER

# is this a commit of a Published API ?
      - name: Set environment variable from script output
        run: |
          IS_PUBLISHED=$(./scripts/api_metadata.sh $ORG $API $VER | jq -r .is_published)
          echo "IS_PUBLISHED=$IS_PUBLISHED" >> $GITHUB_ENV
       
# if Published = true do the basic Sanity checks
      - name: Basic Sanity checks
        if: ${{ env.IS_PUBLISHED == 'true' }} 
        run: | 
          ./scripts/cicd_spec_validator.sh $ORG $API $VER
          ./scripts/cicd_check_comments.sh $ORG $API $VER
          ./scripts/cicd_check_validation.sh $ORG $API $VER

# if Published = true PR to the develop branch
      - name: API is Published - PR triggered
        if: ${{ env.IS_PUBLISHED == 'true' }} 
        uses: actions/checkout@v2
        
      - name: Create pull-request to develop branch
        if: ${{ env.IS_PUBLISHED == 'true' }} 
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          destination_branch: "develop"
          pr_label: "GitHubAction"
          pr_title: "PR for published API commit: ${{ env.ORG }} / ${{ env.API }} / ${{ env.VER }}"
          pr_reviewer: pw-syzygy
          pr_assignee: mhiggins-sa

# define the environment
    env:
      GITHUB_BRANCH: ${{ github.ref_name }}
      HOME: ${{ './scripts' }}
      SPEC_LOCATION: ${{ './yaml-resolved/' }}
      ORG: ${{ 'NicksDemoOrg' }}


